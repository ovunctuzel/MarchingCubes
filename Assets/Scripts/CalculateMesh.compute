#pragma kernel CSMain

// Might have to make boxSize constant. Imagine 16 x 16 x 16 for now.
#include "PerlinHLSL.compute"
#include "Triangulation.compute"

float4 boxSize;
float4 boxOrigin;
RWStructuredBuffer<int> tris;
RWStructuredBuffer<float3> verts;

// Noise Params
float noiseScale;
float noiseIntensity;
float secondaryNoiseIntensity;
float secondaryNoiseScale;
float3 secondaryNoiseOffset;
float noise3DIntensity;
float noise3DScale;
float maskScale;


float GetMaskValue(float3 p)
{
    float v = (Noise(p.x * maskScale, 0, p.z * maskScale) + 1) / 2.0f;

    float beta = 3;
    return 1 / (1 + pow((v/(1-v)), -beta));
}

bool IsPointOutside(float3 p)
{
    float mainNoise = Noise(p.x * noiseScale, 0, p.z * noiseScale) * noiseIntensity;
    float secondaryNoise = Noise(p.x * secondaryNoiseScale + secondaryNoiseOffset.x, secondaryNoiseOffset.y, p.z * secondaryNoiseScale + secondaryNoiseOffset.z) * secondaryNoiseIntensity;
    float noise3D = Noise(p.x * noise3DScale, p.y * noise3DScale, p.z * noise3DScale) * noise3DIntensity;
    float maskFactor = GetMaskValue(p);
    return p.y < (mainNoise + secondaryNoise + noise3D) * maskFactor;
}

[numthreads(8, 8, 8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if((int)id.x >= boxSize.x || (int)id.y >= boxSize.y || (int)id.z >= boxSize.z) return;

    float3 worldPos = boxOrigin.xyz - (boxSize.xyz-1) / 2 + float3(id.x, id.y, id.z);

    // Possible optimization : Don't use conditionals here, GPU doesn't like them
    int cubeConfig = 0;
    cubeConfig += !IsPointOutside(worldPos + float3(0, 0, 1)) ? 1 : 0;
    cubeConfig += !IsPointOutside(worldPos + float3(1, 0, 1)) ? 2 : 0;
    cubeConfig += !IsPointOutside(worldPos + float3(1, 0, 0)) ? 4 : 0;
    cubeConfig += !IsPointOutside(worldPos + float3(0, 0, 0)) ? 8 : 0;
    cubeConfig += !IsPointOutside(worldPos + float3(0, 1, 1)) ? 16 : 0;
    cubeConfig += !IsPointOutside(worldPos + float3(1, 1, 1)) ? 32 : 0;
    cubeConfig += !IsPointOutside(worldPos + float3(1, 1, 0)) ? 64 : 0;
    cubeConfig += !IsPointOutside(worldPos + float3(0, 1, 0)) ? 128 : 0;

    // if(cubeConfig == 0 || cubeConfig == 255) return;

    int cubeIndex = id.z * boxSize.x * boxSize.y + id.y * boxSize.x + id.x;
    int v0index = cubeIndex * 12;
    // verts[v0index + 0] = id;
    // verts[v0index + 1] = cubeConfig;
    // verts[v0index + 2] = worldPos;

    verts[v0index + 0] = float3(0.5, 0, 1) + worldPos; /* OR */ // worldpos + (vert0 + vert1) / 2 /* OR WITH INTERPOLATION */ worldpos + (vert0 * noise@vert0 + vert1 * noise@vert1) / (noise@v1 + noise@v2))
    verts[v0index + 1] = float3(1, 0, 0.5) + worldPos;
    verts[v0index + 2] = float3(0.5, 0, 0) + worldPos;
    verts[v0index + 3] = float3(0, 0, 0.5) + worldPos;
    verts[v0index + 4] = float3(0.5, 1, 1) + worldPos;
    verts[v0index + 5] = float3(1, 1, 0.5) + worldPos;
    verts[v0index + 6] = float3(0.5, 1, 0) + worldPos;
    verts[v0index + 7] = float3(0, 1, 0.5) + worldPos;
    verts[v0index + 8] = float3(0, 0.5, 1) + worldPos;
    verts[v0index + 9] = float3(1, 0.5, 1) + worldPos;
    verts[v0index + 10] = float3(1, 0.5, 0) + worldPos;
    verts[v0index + 11] = float3(0, 0.5, 0) + worldPos;

    int t0index = cubeIndex * 15;
    for(int i = 0; i < 5; i++)
    {   
        int edge1 = triangulation[cubeConfig][i*3];
        int edge2 = triangulation[cubeConfig][i*3+1];
        int edge3 = triangulation[cubeConfig][i*3+2];
        
        // FIX ME!!! 012 012 012
        tris[t0index + i*3] = edge1 >= 0 ? v0index + edge1 : -1;
        tris[t0index + i*3+1] = edge1 >= 0 ? v0index + edge2 : -1;
        tris[t0index + i*3+2] = edge1 >= 0 ? v0index + edge3 : -1;
    }
}
